-@val s: skinny.Skinny
-@val keyAndErrorMessages: skinny.KeyAndErrorMessages
-@val trainingsDictionary: Seq[(Long, String)]

-# Be aware of package imports.
-# 1. src/main/scala/templates/ScalatePackage.scala
-# 2. scalateTemplateConfig in project/Build.scala

div(class="form-group")
  label(class="control-label" for="training_id") #{s.i18n.getOrKey("attempt.trainingId")}
  div(class="controls row")
    div(class={if(keyAndErrorMessages.hasErrors("training_id")) "has-error" else ""})
      div(class="col-xs-12")
        select(value={s.params.training_id} name="training_id")
          - for ((id, name) <- trainingsDictionary)
            option(value={id} selected={s.params.training_id.contains(id)})= name
        -# input(type="text" name="training_id" class="form-control" value={s.params.training_id})
    - keyAndErrorMessages.get("training_id").map { errors =>
      div(class="col-xs-12 has-error")
        - for (error <- errors)
          label(class="control-label") #{error}
    - }
div(class="form-group")
  label(class="control-label" for="exercise_id") #{s.i18n.getOrKey("attempt.exerciseId")}
  div(class="controls row")
    div(class={if(keyAndErrorMessages.hasErrors("exercise_id")) "has-error" else ""})
      div(class="col-xs-12")
        input(type="text" name="exercise_id" class="form-control" value={s.params.exercise_id})
    - keyAndErrorMessages.get("exercise_id").map { errors =>
      div(class="col-xs-12 has-error")
        - for (error <- errors)
          label(class="control-label") #{error}
    - }
div(class="form-group")
  label(class="control-label" for="shooter_id") #{s.i18n.getOrKey("attempt.shooterId")}
  div(class="controls row")
    div(class={if(keyAndErrorMessages.hasErrors("shooter_id")) "has-error" else ""})
      div(class="col-xs-12")
        input(type="text" name="shooter_id" class="form-control" value={s.params.shooter_id})
    - keyAndErrorMessages.get("shooter_id").map { errors =>
      div(class="col-xs-12 has-error")
        - for (error <- errors)
          label(class="control-label") #{error}
    - }
div(class="form-group")
  label(class="control-label" for="result") #{s.i18n.getOrKey("attempt.result")}
  div(class="controls row")
    div(class={if(keyAndErrorMessages.hasErrors("result")) "has-error" else ""})
      div(class="col-xs-12")
        input(type="text" name="result" class="form-control" value={s.params.result})
    - keyAndErrorMessages.get("result").map { errors =>
      div(class="col-xs-12 has-error")
        - for (error <- errors)
          label(class="control-label") #{error}
    - }
div(class="form-actions")
  =unescape(s.csrfHiddenInputTag)
  input(type="submit" class="btn btn-primary" value={s.i18n.getOrKey("submit")})
    a(class="btn btn-default" href={s.url(Controllers.attempts.indexUrl)}) #{s.i18n.getOrKey("cancel")}
